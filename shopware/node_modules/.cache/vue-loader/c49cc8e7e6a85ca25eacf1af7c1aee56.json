{"remainingRequest":"C:\\Users\\tina_\\OneDrive\\Desktop\\ShopwareApp\\shopware\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\tina_\\OneDrive\\Desktop\\ShopwareApp\\shopware\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\tina_\\OneDrive\\Desktop\\ShopwareApp\\shopware\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\tina_\\OneDrive\\Desktop\\ShopwareApp\\shopware\\src\\views\\Product.vue?vue&type=template&id=35171425&scoped=true&","dependencies":[{"path":"C:\\Users\\tina_\\OneDrive\\Desktop\\ShopwareApp\\shopware\\src\\views\\Product.vue","mtime":1586559440771},{"path":"C:\\Users\\tina_\\OneDrive\\Desktop\\ShopwareApp\\shopware\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\tina_\\OneDrive\\Desktop\\ShopwareApp\\shopware\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\tina_\\OneDrive\\Desktop\\ShopwareApp\\shopware\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\tina_\\OneDrive\\Desktop\\ShopwareApp\\shopware\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}